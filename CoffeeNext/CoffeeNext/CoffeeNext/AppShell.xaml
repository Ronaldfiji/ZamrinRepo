<?xml version="1.0" encoding="UTF-8"?>
<Shell xmlns="http://xamarin.com/schemas/2014/forms" 
       xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
       xmlns:local="clr-namespace:CoffeeNext.Views"
       Title="CoffeeNext"
       x:Class="CoffeeNext.AppShell"
       xmlns:viewmodels="clr-namespace:CoffeeNext.ViewModels"
       xmlns:xct="http://xamarin.com/schemas/2020/toolkit"
       xmlns:cells="clr-namespace:CoffeeNext.Cells"      
       x:Name="AppShellPage"
       >

    
    
    <!--
        The overall app visual hierarchy is defined here, along with navigation.
    
        https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/
    -->
    <Shell.BindingContext>     
            <viewmodels:SignInViewModel/>   
    </Shell.BindingContext>

    
    
    <Shell.Resources>
        <ResourceDictionary>
            <!--
            Initialize InvertedBoolConverter to swtich visible status.
            -->
            <xct:InvertedBoolConverter x:Key="InvertedBoolConverter" />
           

            <Style x:Key="BaseStyle" TargetType="Element">
                <Setter Property="Shell.BackgroundColor" Value="{StaticResource Primary}" />
                <Setter Property="Shell.ForegroundColor" Value="White" />
                <Setter Property="Shell.TitleColor" Value="White" />
                <Setter Property="Shell.DisabledColor" Value="#B4FFFFFF" />
                <Setter Property="Shell.UnselectedColor" Value="#95FFFFFF" />
                <Setter Property="Shell.TabBarBackgroundColor" Value="{StaticResource Primary}" />
                <Setter Property="Shell.TabBarForegroundColor" Value="White"/>
                <Setter Property="Shell.TabBarUnselectedColor" Value="#95FFFFFF"/>
                <Setter Property="Shell.TabBarTitleColor" Value="White"/>
            </Style>
            <Style TargetType="TabBar" BasedOn="{StaticResource BaseStyle}" />
            <Style TargetType="FlyoutItem" BasedOn="{StaticResource BaseStyle}" />

            <!--
            Default Styles for all Flyout Items
            https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyoutitem-and-menuitem-style-classes
            -->
            <Style Class="FlyoutItemLabelStyle" TargetType="Label">
                <Setter Property="TextColor" Value="White"></Setter>
            </Style>
            <Style Class="FlyoutItemLayoutStyle" TargetType="Layout" ApplyToDerivedTypes="True">
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal">
                                <VisualState.Setters>
                                    <Setter Property="BackgroundColor" Value="{x:OnPlatform UWP=Transparent, iOS=White}" />
                                    <Setter TargetName="FlyoutItemLabel" Property="Label.TextColor" Value="{StaticResource Primary}" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Selected">
                                <VisualState.Setters>
                                    <Setter Property="BackgroundColor" Value="{StaticResource Primary}" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>

            <!--
            Custom Style you can apply to any Flyout Item
            -->
            <Style Class="MenuItemLayoutStyle" TargetType="Layout" ApplyToDerivedTypes="True">
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal">
                                <VisualState.Setters>
                                    <Setter TargetName="FlyoutItemLabel" Property="Label.TextColor" Value="{StaticResource Primary}" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Shell.Resources>

    <!-- 
        When the Flyout is visible this defines the content to display in the flyout.
        FlyoutDisplayOptions="AsMultipleItems" will create a separate flyout item for each child element    
        https://docs.microsoft.com/dotnet/api/xamarin.forms.shellgroupitem.flyoutdisplayoptions?view=xamarin-forms
    -->



    <Shell.ToolbarItems>
        <ToolbarItem Text="I am tool bar" />
    </Shell.ToolbarItems>
    
    <FlyoutItem Title="About" Icon="icon_about.png">
        <ShellContent Route="AboutPage" ContentTemplate="{DataTemplate local:AboutPage}" />
    </FlyoutItem>   
    
    <FlyoutItem Title="Browse" Icon="icon_feed.png">
        <ShellContent Route="ItemsPage" ContentTemplate="{DataTemplate local:ItemsPage}" />
    </FlyoutItem>

    <FlyoutItem Title="Login Test" Icon="icon_about.png">
        <ShellContent Route="ItemsPage" ContentTemplate="{DataTemplate local:LoginPageTest}" />
    </FlyoutItem>
    
    <FlyoutItem Title="Profile" Icon="icon_about.png" >
        <ShellContent Route="ProfilePage" ContentTemplate="{DataTemplate local:ProfilePage}" IsVisible="{Binding  LoginStatusDisplayFlyOut}"  />
    </FlyoutItem>

    <!--
    <FlyoutItem Title="SignUp" Icon="icon_about.png">
        <ShellContent ContentTemplate="{DataTemplate local:RegistrationPage}" />
    </FlyoutItem>
    -->
    <!--  Route="RegoPage"  -->
   

    <FlyoutItem Title="Projects" Icon="icon_about.png">
        <ShellContent ContentTemplate="{DataTemplate local:ProjectsPage}" />
    </FlyoutItem>
    <!--  Route="RegoPage"  -->

    <ShellItem Route="SignInPage" Title="SignIn" x:Name="LoginItem" Icon="icon_LogIn.png" 
               IsVisible=  "{Binding LoginStatusDisplayFlyOut,  Converter={StaticResource InvertedBoolConverter}, Mode=TwoWay  }">
        <!-- FlyoutItemIsVisible="False"-->
        <ShellContent ContentTemplate="{DataTemplate local:SignInPage}"/>

    </ShellItem>

    <ShellItem x:Name="LogoutItem"  Title="SignOff" Icon="icon_logOut.png" 
           IsVisible="{Binding  LoginStatusDisplayFlyOut}" >        
        <ShellContent ContentTemplate="{DataTemplate local:SignOutPage}"   />        
    </ShellItem>

    <!-- When the Flyout is visible this will be a menu item you can tie a click behavior to  -->
   
     <MenuItem Text="Logout Menu" StyleClass="MenuItemLayoutStyle"  
            Clicked="OnSignOff_Clicked" IconImageSource="info.png">        
    </MenuItem>


    <!-- x:DataType="viewmodels:ProfileViewModel" Command="{Binding SignOffCommand}" -->
    
    <!--
        TabBar lets you define content that won't show up in a flyout menu. When this content is active
        the flyout menu won't be available. This is useful for creating areas of the application where 
        you don't want users to be able to navigate away from. If you would like to navigate to this 
        content you can do so by calling 
        await Shell.Current.GoToAsync("//LoginPage");
    -->
    <TabBar >       
        <ShellContent Title="Bula " Route="LoginPageTest" ContentTemplate="{DataTemplate local:LoginPageTest}"  />        
    </TabBar>

   
    <!--
    <Shell.FlyoutHeaderTemplate  >
        <DataTemplate >
            <StackLayout BackgroundColor="White"> -->
                <!--Header-->

    <!--
                <StackLayout Orientation="Horizontal" BackgroundColor="LightGray" Padding="20"  > -->
                  <!--
                    <Label Text="Register" TextColor="Black" VerticalOptions="CenterAndExpand" HorizontalOptions="StartAndExpand" VerticalTextAlignment="Center">
                        <Label.GestureRecognizers>
                            <TapGestureRecognizer Command="{Binding SignInCommand }" Tapped="TapGestureRecognizer_Tapped"/>
                        </Label.GestureRecognizers>
                    </Label> -->
    <!--                <Label  IsVisible="{Binding IsUserLoggedIn}" Text="SignOff" TextColor="Black" VerticalOptions="CenterAndExpand" HorizontalOptions="EndAndExpand" VerticalTextAlignment="Center">
                        <Label.GestureRecognizers>
                            <TapGestureRecognizer  Tapped="TapGestureRecognizer_Tapped"/>
                        </Label.GestureRecognizers>
                    </Label>
                </StackLayout>
            </StackLayout>
        </DataTemplate>
    </Shell.FlyoutHeaderTemplate>
-->
    
    <!--
    <Shell.MenuItemTemplate IsVisible="{Binding IsUserLoggedIn}">
        <DataTemplate>
            <StackLayout BackgroundColor="White" IsVisible="{Binding IsUserLoggedIn}">
                Header-->
<!--
                <StackLayout Orientation="Horizontal" BackgroundColor="LightGray" Padding="20"  >
                 
                    <Label  IsVisible="{Binding IsUserLoggedIn}" Text="SignOff......" TextColor="Black" 
                            VerticalOptions="CenterAndExpand" HorizontalOptions="End" VerticalTextAlignment="Center">
                        <Label.GestureRecognizers>
                            <TapGestureRecognizer  Tapped="TapGestureRecognizer_Tapped"/>
                        </Label.GestureRecognizers>
                    </Label>
                </StackLayout>
            </StackLayout>
        </DataTemplate>
    </Shell.MenuItemTemplate>
    -->
    
    <!-- Optional Templates 
    // These may be provided inline as below or as separate classes.

    // This header appears at the top of the Flyout.
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyout-header
    <Shell.FlyoutHeaderTemplate>
        <DataTemplate>
            <Grid>ContentHere</Grid>
        </DataTemplate>
    </Shell.FlyoutHeaderTemplate>

    // ItemTemplate is for ShellItems as displayed in a Flyout
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-flyoutitem-appearance
    <Shell.ItemTemplate>
        <DataTemplate>
            <ContentView>
                Bindable Properties: Title, Icon
            </ContentView>
        </DataTemplate>
    </Shell.ItemTemplate>

    
    // MenuItemTemplate is for MenuItems as displayed in a Flyout
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-menuitem-appearance
     
    <Shell.MenuItemTemplate>
        <DataTemplate>
            <ContentView >
                <Grid ColumnDefinitions="0.2*,0.8*" >
                    <Image Source="{Binding Icon}" 
                       Margin="5"
                       HeightRequest="45" />
                    <Label Grid.Column="1"
                       Text="Test Menu"
                       FontAttributes="Italic"
                       VerticalTextAlignment="Center" />
                </Grid>
            </ContentView>
        </DataTemplate>
    </Shell.MenuItemTemplate>

   -->

    <Shell.FlyoutHeader>
        <cells:FlyoutHeader IsVisible="{Binding LoginStatusDisplayFlyOut}"/>
    </Shell.FlyoutHeader>

    <Shell.FlyoutFooter>
        <cells:FlyoutFooter  />
    </Shell.FlyoutFooter>
    
</Shell>
 